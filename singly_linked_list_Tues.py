# singly_linked_list.py
#=========================================================
# 코드 3.1: 단순연결구조를 위한 Node 클래스
"""
1. 단순 연결 구조를 위한 Node 클래스
2. 각 노드는 데이터 필드(data)와 다음 노드를 가리키는 링크 필드(link)를 가짐
3. append(node): 현재 노드 뒤에 주어진 노드를 연결
4. popNext(): 현재 노드의 다음 노드를 리스트에서 제거하고, 그 노드를 반환
"""
# 단순연결구조를 위한 Node 클래스

# 코드 3.2: 단순연결리스트 클래스
"""
1. 단순 연결 리스트 구조를 관리하는 클래스
2. head: 리스트의 첫 번째 노드를 가리키는 포인터
3. 주요 메서드:
   - isEmpty(): 리스트가 비어있는지 확인
   - isFull(): 리스트가 가득 찼는지 확인
   - getNode(pos): 특정 위치의 노드를 반환
   - getEntry(pos): 특정 위치의 노드 데이터를 반환
   - replace(pos, elem): 특정 위치의 노드 데이터를 변경
   - size(): 리스트의 크기를 반환
   - display(msg): 리스트의 내용을 출력
   - insert(pos, elem): 특정 위치에 새 노드를 삽입
   - delete(pos): 특정 위치의 노드를 삭제
   - find(elem): 특정 데이터를 가진 노드를 검색
"""
# 단순연결리스트 클래스










 
# 연습문제2: 어떤 요소를 찾아 위치를 반환하는 함수를 정의하기 : 리스트에 없으면 -1 반환, 있으면 그 위치를 정수로 반환

    
   
#=========================================================
# 테스트 프로그래램
#=========================================================
def test_code_3_3():
    #1. 연결 리스트 생성
    ll = LinkedList()
    ll.display("연결리스트(초기):   ")      # 출력: LinkedList: None

    #2. 노드 삽입
    ll.insert(0, 10) # 첫 번째 위치에 10 삽입
    ll.display("첫 번째 위치에 10 삽입")
    ll.insert(0, 20)  # 첫 번째 위치에 20 삽입
    ll.display("첫 번째 위치에 20 삽입")
    ll.insert(1, 30)  # 두 번째 위치에 30 삽입
    ll.display("두 번째 위치에 30 삽입")
    ll.insert(ll.size(), 40)  # 마지막 위치에 40 삽입
    ll.display("마지막 위치에 40 삽입")
    ll.insert(2, 50)  # 세 번째 위치에 50 삽입
    ll.display("세 번째 위치에 50 삽입")
    ll.display("연결리스트(삽입x5): ")     
    ll.replace(2,90) # 세 번째 위치의 노드 데이터를 90으로 변경
    ll.display("연결리스트(교체X1-> 90으로 변경): ")    

    # 3.노드 삭제
    ll.delete(2)      # 세 번째 노드 삭제
    ll.display("세 번째 노드 삭제")
    ll.delete(3)      # 네 번째 노드 삭제
    ll.display("네 번째 노드 삭제")
    ll.delete(0)      # 첫 번째 노드 삭제
    ll.display("첫 번째 노드 삭제")
    ll.display("연결리스트(삭제x3): "   )      

   


if __name__ == "__main__" :
    # test_code_3_3()  
    # test()
    # quiz_2()


